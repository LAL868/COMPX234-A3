Import socket 
Import sys 
Import time 

def send_request(server_host, server_port, request):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client_socket.connect((server_host, server_port))
        client_socket.send(request.encode('utf-8'))
        response = client_socket.recv(1024).decode('utf-8')
        return response
    except Exception as e:
        print(f"Error sending request: {e}")
        return None
    finally:
        client_socket.close()

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python client.py <server_host> <server_port> <request_file>")
        sys.exit(1)

    #Analyze command-line parameters
    server_host = sys.argv[1]  
    server_port = int(sys.argv[2]) 
    request_file = sys.argv[3]

    try:
        with open(request_file, 'r') as file:
            # Read request file line by line
            for line in file:
                line = line.strip()  

                if not line:
                    continue

                parts = line.split()  
                operation = parts[0]  
                key = parts[1] 
                
                # For PUT operations, it is also necessary to obtain values
                value = parts[2] if operation == 'PUT' else ''
                
                if operation == 'PUT':
                    message_length = len(f"{operation} {key} {value}") + 3  
                    request = f"{message_length:03d}{operation} {key} {value}"  
                else:
                    message_length = len(f"{operation} {key}") + 3
                    request = f"{message_length:03d}{operation} {key}"
                
                # Send a request and receive a response
                response = send_request(server_host, server_port, request)
                
                # Print request and response results
                if response:
                    print(f"Request: {line} → Response: {response}")
                else:
                    print(f"Request: {line} → Error: No response")
                
                # Control the request sending rate
                time.sleep(0.01)  

    except FileNotFoundError:
        print(f"Error: Request file '{request_file}' not found")
        sys.exit(1)

    except Exception as e:
        print(f"Error processing request file: {e}")
        sys.exit(1)
